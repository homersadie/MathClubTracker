//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for NHibernate model.
// Code is generated on: 10/6/2013 4:08:42 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace MathClubTracker.NHibernate
{
    public partial class MemoryRepository<T> : IRepository<T>
    {
        public MemoryRepository()
        {
        }

        public MemoryRepository(IEnumerable<T> entities)
        {
            if (entities != null)
            {
                foreach (var entity in entities)
                {
                    Add(entity);
                }
            }
        }

        public MemoryRepository(params T[] entities)
        {
            if (entities != null)
            {
                foreach (var entity in entities)
                {
                    Add(entity);
                }
            }
        }

        protected List<T> objectSet = new List<T>();

        public virtual IQueryable<T> All()
        {
            return objectSet.AsQueryable();
        }

        public virtual T Add(T entity)
        {
            objectSet.Add(entity);
            return default(T);
        }

        public virtual void Remove(T entity)
        {
            objectSet.Remove(entity);
        }

        public virtual T Get(int id)
        {
            return default(T);
        }

        public ICollection<T> GetAll()
        {
            return null;
        }

        public void Insert(T entity)
        {
            objectSet.Add(default(T));
        }

        public void Update(T entity)
        {
            
        }

	  }
}
